[tool.commitizen]
version = "0.1.0"
version_files = [
    "raffle_ds_research/__init__.py:__version__",
    "pyproject.toml:version",
    "VERSION",
]
tag_format = "v$version"
bump_message = "[ci skip] bump: $current_version → $new_version"


[tool.poetry]
name = "raffle-ds-research"
version = "0.1.0"
description = "User-friendly and scalable experimentation framework for modern NLP"
authors = ["Valentin Liévin <vl@raffle.ai>"]
readme = "README.md"
packages = [{ include = "raffle_ds_research" }]

[tool.poetry.scripts]
train = 'raffle_ds_research.cli.train:run'
watch = 'watch_gpus:run'

[tool.poetry.dependencies]
python = "^3.9"
hydra-core = "^1.3.1"
loguru = "^0.6.0"
datasets = "^2.10.0"
torch = { version = "^2.0", allow-prereleases = true }
lightning = "^2.0.0"
wandb = "^0.14.0"
transformers = "^4.26.1"
pydantic = "^1.8"
jinja2 = ">=2.0"
stackprinter = "^0.2.10"
randomname = "^0.2.1"
sentencepiece = "^0.1.97"
tensorstore = "^0.1.32"
hydra-colorlog = "^1.2.0"
rich = "^13.3.1"
optimum = "^1.7.1"
faiss-cpu = { platform = "darwin", version = "==1.6.5" }
faiss-gpu = { platform = "linux", version = "^1.7" }
fastapi = ">=0.80"
uvicorn = ">=0.20.0"
psutil = "^5.9.4"
python-dotenv = "^1.0.0"
cython = "^0.29.33"
deepspeed = "^0.8.3"
elasticsearch = "^8.6.2"
gcsfs = "^2023.3.0"
richuru = "^0.1.1"


[tool.poetry.group.dev.dependencies]
pytest = "^7.2.1"
black = { extras = ["d"], version = "^23.3.0" }
isort = "^5.12.0"
pre-commit = "^3.0.4"
commitizen = "^2.42.0"
seaborn = "^0.12.2"
inflect = "^6.0.2"
ruff = "^0.0.261"


[tool.poetry.group.cuda]
optional = true

[tool.poetry.group.cuda.dependencies]
faiss-gpu = "^1.7"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core", "Cython", "numpy"]


[tool.poetry.build]
generate-setup-file = false
script = "build.py"

[tool.ruff]
select = [
    "E",
    "F",
    "D",
    "ANN",
    "PL",
    "I",
    "B",
    "N",
    "C",
    "S",
    "G",
    "DTZ",
    "ICN",
    "RET",
    "SIM",
    "TID",
    "PTH",
    "ARG",
]
ignore = ["D107", "D100", "ANN101", "ANN204", "B905", "N805", "S311"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# don't remove unsued imports from __init__.py files
ignore-init-module-imports = true

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.per-file-ignores]
"*/__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]
split-on-trailing-comma = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.pylint]
max-args = 8

[tool.black]
line-length = 120
exclude = '''
(
  /(
      \.git
    | \.pyx
    | \.venv
    | _build
    | build
    | dist
  )/
)
'''

[tool.pyright]
reportOptionalMemberAccess = false

[tool.z.main]
ignore = ["tests"]
py-version = "3.11"
